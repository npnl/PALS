class Descriptions(object):
	def __init__(self):
		# for welcome page
		self.license = "PALS Copyright (C) 2018 *This program comes with ABSOLUTELY NO WARRANTY. This is free software, and you are welcome to redistribute it under certain conditions; see <http://www.gnu.org/licenses/>."

		self.rad_reorient = "This module will check that all subject inputs are in the same orientation, flag subjects that have mismatched input orientations, and convert all remaining inputs to radiological convention. This is recommended for all datasets, and especially for multi-site data."

		self.registration = "Whether to perform registration to a commong template. For example, FLIRT (FMRIB's Linear Image Registration Tool) is used by default. FLIRT is a fully automated robust and accurate tool for linear (affine) intra- and inter-modal brain image registration."
		
		self.brain_extraction = "Whether to perform brain extraction"

		self.wm_segmentation = "Whether to do white matter segmentation. If unchecked, and you want to perform LesionCorrection, LesionLoadCalculation, or Lesionheatmap, you must place file in same location as the input files in the BIDS structure."

		self.wm_correction = "This module is for manually segmented lesions. This aims to correct for intact white matter voxels that may have been inadvertently included in a manually segmented mask by removing voxels in the lesion mask that are within the intensity range of a white matter mask."

		self.lesion_load = "This module will perform lesion load for several different ROI selections: default ROIs, freesurfer segmentations, and user-input ROIs."
		
		self.lesion_heatmap = "Whether to combine the lesions into a heatmap. If checked, requires white matter segmentation file."

		self.visual_qc = "This module can only be selected if none of the other modules are selected. This will create a visual inspection page with lesion masks overlaid on T1s."

		# for inputs page
		self.input_dir = "Provide the path to your input directory. The input directory should contain separate subject directories, each with at least a T1 anatomical and lesion mask file in nifti format."

		self.output_dir = "Provide the path to your desired output directory."

		self.t1_identifier = "Provide the T1 identifier to your whole-brain anatomical images. Note: this identifier should be unique to the anatomical whole-brain image only. For example, put 'T1' if subject1's T1 file is subj01_T1.nii.gz."

		self.lm_identifier = "Provide the identifier for your lesion mask. For example, put 'Lesion' if subject1's lesion mask files is subj01_Lesion.nii.gz."

		# for lesion correction input page and lesion load input page
		self.brain_ext = "Indicate if you have already performed brain extraction for all subjects. Each subject directory should contain a skull-stripped brain. If not, PALS will perform brain extraction for all subjects using FSL BET. *NOTE: Skull-stripped brain files must be present in each subject directory. If any subject is missing a brain file, PALS will run brain extraction on all subjects."

		self.bet_identifier = "Indicate the unique identifier for skull-stripped brain files. For example, 'Brain' if subject1's brain file is subj01_Brain.nii.gz."

		self.wm_seg = 'Indicate if you have already performed white matter segmentation on all subjects. Each subject directory should contain a white matter mask. If not, PALS will perform white matter segmentation for all subjects using FSL FAST. *NOTE: White matter mask files must be present in each subject directory. If any subject is missing a white matter mask, PALS will run white matter segmentation on all subjects.'

		self.wm_identifier = "Indicate the unique identifier for white matter masks. For example, 'wm' if subject1's white matter mask filename is subj01_wm.nii.gz."

		self.percent = "Please provide a value between 0-100. This will be used to calculate the total number of voxels to remove above and below the average white matter mask intensity. A value of 0 means only intensity values that are equal to the average white matter intensity will be removed."

		# for lesion load input page only
		self.default_rois = "Select if you would like to calculate lesion load using regions of interest included in PALS. *NOTE: all of these template ROIs are in 2mm MNI152 template space."

		self.own_rois = "Select if you would like import your own regions of interest to calculate lesion load. *NOTE: these ROIs must all be in the same space."

		self.subject_specific = "Select if you would like to use subject-specific Freesurfer segmentations to calculate lesion load. This operation requires that Freesurfer cortical and subcortical segmentation has already been performed for each subject, and each subject directory must contain an aparc+aseg.mgz and T1.mgz file."

		# for running operations page
		self.subject_file = "This is for QC only. Once a QC page has been generated by PALS, a link to the page will show up. Use the link to visually inspect the outputs and select subjects that do not pass inspection. At this point, you will be able to download a textfile containing the subjects you flagged. If you would like to remove these subjects from analysis, import the downloaded textfile into the space below. If you would like to keep all subjects in the analysis pipeline, click on 'Continue with all subjects'."

		# for default ROI input popup page
		self.btn_custom = "Click here to use additional ROIs included in the PALS toolbox."

		# for user-input ROI popup page
		self.select_dir = "A template brain must be provided in order to run this operation. All imported ROIs must be in the same space as this template brain."

		self.frame_inputs = "Paste in paths to ROIs here. Make sure each new ROI path is on a separate line, or delimited with a newline character '\\n'"

		# for subject-specific FS popup page
		self.verify_FS = "FreeSurfer must have been already completed on all subjects prior to selecting this option. Each subject directory MUST contain an aparc+aseg.mgz and T1.mgz file for this module to run properly."


		self.reorient = "This module will check that all subject inputs are in the same orientation, flag subjects that have mismatched input orientations, and convert all remaining inputs to radiological convention. This is recommended for all datasets, and especially for multi-site data."
		self.orientation = "Orientation to standardize to. Options: L/R (left/right), A/P (anterior/posterior), I/S (inferior/superior). Default is LAS."
		self.registration = "This module will perform registration to a common template."
		self.registration_method = "Registration method. For example, FLIRT (FMRIB's Linear Image Registration Tool) is used by default. FLIRT is a fully automated robust and accurate tool for linear (affine) intra- and inter-modal brain image registration."
		self.brain_extraction = "This module will perform brain extraction."
		self.brain_extraction_method = "Method to use for brain extraction. For example, BET (Brain Extraction Tool) is used by default. BET deletes non-brain tissue from an image of the whole head."
		self.white_matter_segmentation = "This module will perform white matter segmentation. If false, and you want to perform LesionCorrection, you must place file in same location as the input files in the BIDS structure."
		self.lesion_correction = "This module will perform lesion correction. If true, requires white matter segmentation file."
		self.lesion_load_calculation = "This module will compute lesion load."
		self.lesion_heatmap = "This module will combine the lesions into a heatmap."

		self.lc_image_norm_min = "Minimum value for image."
		self.lc_image_norm_max = "Maximum value for image."
		self.lc_wm_spread = "The deviation of the white matter intensity as a fraction of the mean white matter intensity."
		
		self.bids_root_dir = "Directory path to the BIDS root directory for the raw data."
		self.input_subject = "ID of the subject to run. Runs all subjects if left blank. Ex: r001s001"
		self.input_session = "ID of the session to run. Runs all sessions if left blank. Ex: 1"
		self.input_lesion_root = "Path to the BIDS root directory for the lesion masks."
		self.white_matter_segmentation_root = "Path to the BIDS root directory for the white matter segmentation files."
		self.input_ROIDir = "Path to the directory containing ROI image files."
		self.input_multiprocessing = "Number of threads to use for multiprocessing. Has no effect unless more than one subject is being processed."

		self.lesion_identifier_space = "Provide the space for your lesion file. For example, put 'MNIEx2009aEx' if your file is sub-r044s001_ses-1_space-MNIEx2009aEx_label-L_desc-T1lesion_mask.nii"
		self.lesion_identifier_label = "Provide the label for your lesion file. For example, put 'L' if your file is sub-r044s001_ses-1_space-MNIEx2009aEx_label-L_desc-T1lesion_mask.nii"
		self.lesion_identifier_suffix = "Provide the suffix for your lesion file. For example, put 'mask' if your file is sub-r044s001_ses-1_space-MNIEx2009aEx_label-L_desc-T1lesion_mask.nii"
		
		self.reg_ext_reference = "Path to reference file"
		self.reg_ext_cost_func = "Cost function for registration"

		self.T1_identifier_space = "Provide the space for your T1 file. For example, put 'MNIEx2009aEx' if your file is sub-r044s001_ses-1_space-MNIEx2009aEx_desc-T1FinalResampledNorm.nii"
		self.T1_identifier_desc = "Provide the desc for your T1 file. For example, put 'T1FinalResampledNorm' if your file is sub-r044s001_ses-1_space-MNIEx2009aEx_desc-T1FinalResampledNorm.nii"

		self.heatmap_reference = "Overlays the heatmap on this image and creates NIFTI file with overlay and NITFI file with the mask only. Also produces 4 PNGS: 9 slices of the lesions from sagittal, axial, and coronal orientations (3 images) and an image with a cross-section of each orientation. If your images are pre-registered, you MUST use your own reference image used for their registration."
		self.heatmap_transparency = "Transparency to use when mixing the reference image and the heatmap. Smaller values darker reference and lighter heatmap."

		self.output_root = "Path to directory where to place the output."
		self.start_reg_space = "Value to use for \"space\" entity in BIDS output filename."
		self.output_reg_space = "Reserved for future use." 
		self.output_reg_transform = "Path for saving registration transform."
		self.output_reorient = "Path for saving reoriented volume."
		self.output_brain_extraction = "Path for saving the brain extracted volume."
		self.output_lesion_correction = "Path for saving the white matter-corrected lesions."
